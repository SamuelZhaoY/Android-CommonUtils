import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import liquibase.integration.commandline.Main
import org.gradle.api.NamedDomainObjectContainer

class LiquibaseTask extends DefaultTask {
  String command
  String url, password, username
  File changeLog
  @TaskAction
  def liquibaseAction() {
    def args = [
        "--url=${url}",
        "--password=${password}",
        "--username=${username}",
        "--changeLogFile=${changeLog.absolutePath}",
        command ]

      Main.main(args as String[])
    }
}

class ChangeLog {
  def name
  def file
  def description
  ChangeLog(String name) {
    this.name = name
  }
}

class Database {
  def name
  def url
  def username def password
  Database(String name) {
    this.name = name
  }
}

class LiquibaseExtension {
  final NamedDomainObjectContainer<Database> databases
  final NamedDomainObjectContainer<ChangeLog> changelogs
  Database defaultDatabase
  String context

  LiquibaseExtension(databases, changelogs) {
    this.databases = databases this.changelogs = changelogs
  }

  def databases(Closure closure) {
    databases.configure(closure)
  }
  def changelogs(Closure closure) {
    changelogs.configure(closure)
  }
}

class LiquibasePlugin implements Plugin<Project> { void apply(Project project) {
    project.task('generateChangeLog', type: LiquibaseTask) {
      group = 'Liquibase'
      command = 'generateChangeLog'
    }
    project.task('changeLogSync', type: LiquibaseTask) {
      group = 'Liquibase'
      command = 'changeLogSync'
    }
    project.task('update', type: LiquibaseTask) {
      group = 'Liquibase'
      command = 'update'
    }


    // Create the NamedDomainObjectContainers
    def databases = project.container(Database)
    def changelogs = project.container(ChangeLog)

    // Create and install the extension object
    project.configure(project) {
      extensions.create("liquibase",
      LiquibaseExtension,
      databases,
      changelogs)
    }
}
